#+title: Alice Margatroid ToDos
#+startup: hidestars
Just a helpul list so I don't forget ideas and concepts.

* Operations

** DONE @at
   replies:
   - "A skąd niby mam wiedzieć? Zapytaj kd_bot albo [ten drugi]."
   - "Nie wiem."
   - "A czy wyglądam Ci na odźwierną? Spytaj kd_bot albo [ten drugi]."
   - "Pozwól, że spytam za Ciebie." followed by public: "!at" and "~at" (or however it was)

** DONE Throttling output

** TODO Google search

** TODO Auto-Rejoin on Kick

** TODO Noting stuff down
   Use case:
   #+BEGIN_EXAMPLE
     * TeMPOraL musi doczytać więcej o kanbanie na poziomie teoretycznym  [15:12]
     <TeMPOraL> Alice_M, zapiszesz?
     <Alice_M> TeMPOraL :P
     <TeMPOraL> thx
   #+END_EXAMPLE

** DONE Respond to thanks
   input: "thx", "thanks", "dzięki", "dzieki", "dziekuje", "thank you", "ty"
   output: "you're welcome", "nie ma za co", "sure, np.", "np." "no problem", ":)"

** DONE Send notifications to author
   Via pushover.

* Improvements
** TODO Refactor user string matcher to use regular expressions
   Since we already use cl-ppcre, why waste CPU cycles on my dumb matcher?

** TODO ASDF packaging

* Concepts

** Limited Human Language Recognition
*** Bayesian classification?
    Just like spam filtering.

** Bi-linguality
   Keep localizations of selector groups and localizations of responses.

   Not having to match strings 1:1 would be more flexible.


** Tracking identities
   Here's a concept for identity tracking.
   - whenever Alice sees a nick she never saw before, she creates a person entry for it
   - whenever that new person changes the nickname, Alice adds the nickname to the list of that person's aliases
   - sometimes there will be collisions, multiple people assuming the same nick for variety of reasons, probably mostly trolling
   - that's why Alice will remember the number of times she saw a particular alias for a particular person
   - whenever there are 2 or more people with the same aliases, Alice will be in "identity collision mode"
   - collisions can be resolved interactively both via REPL and IRC talks
   - Alice will ask whether [alias] belongs to (list of persons)
   - after the answer from a trusted party Alice will resolve collision by removing the alias from other people

   Potential problem: while the above method is good for long-term memory, it will be invalid for runtime
   operations; i.e. if person B pretends to be person A by changing nick to A' while Alice sees it, she should
   remember the B->A' trail and resolve A' to person B.

   Meh, this needs more thinking.

* Sketchpad
  #+BEGIN_SRC lisp
    (add-rule :type :public
              :match ("fail")
              :respond ((lambda () (if (= 0 (rand 5))
                                      ("...")
                                      nil))))
    
    (add-rule :type :direct
              :match ("kto[sś]{0,1} jest w HS[?]{0,1}"
                      "at")
              :respond ("A skąd mam wiedzieć?"
                        "Czy wyglądam Ci na odźwiernego? Zapytaj kd_bot."
                        ("Eh... pozwól, że zapytam kd_bot za Ciebie."
                         "!at")))
    
  #+END_SRC

